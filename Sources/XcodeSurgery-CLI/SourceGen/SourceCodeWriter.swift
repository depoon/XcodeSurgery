//
//  SourceCodeWriter.swift
//  
//
//  Created by Kenneth Poon on 5/2/21.
//

import Foundation

class SourceCodeWriter {

    func generatePlistReaderSourceCode(plistFile: String,
                                       structName: String) -> String {
        guard let dictionary: PlistDictionary = NSDictionary(contentsOfFile: plistFile) as? PlistDictionary else {
            fatalError("Unable to convert to dictionary: \(plistFile)")
        }

        let structCode = dictionary.generateStructSourceCode(structName: structName,
                                                             depth: 1,
                                                             chainedKeys: [])
        var sourceCode = "import Foundation"
        sourceCode.append(contentsOf: "\n//This file is autogenerated from XCScheme")
        sourceCode.append(contentsOf: "\(structCode)")

        return sourceCode
    }

    func shouldWriteOutputfile(outputFile: String, sourceCodeToWrite: String) -> Bool {
        guard FileManager.default.fileExists(atPath: outputFile) else {
            return true
        }
        guard let contents: String = try? String.init(contentsOfFile: outputFile, encoding: String.Encoding.utf8) else {
            return true
        }
        if sourceCodeToWrite == contents {
            return false
        }
        return true
    }
    
    func writeSourceCode(outputFile: String, sourceCodeToWrite: String) {
        guard let _ = try? sourceCodeToWrite.write(toFile: outputFile, atomically: true, encoding: String.Encoding.utf8) else {
            fatalError("Error Writing source code to file: \(outputFile)")
        }
    }
}

typealias PlistDictionary = [String: Any]
extension PlistDictionary {
    func generateStructSourceCode(structName: String,
                                  depth: Int,
                                  chainedKeys: [String]) -> String {
        var structNameTabsPrefix = ""
        for _ in 1...depth {
            structNameTabsPrefix.append(contentsOf: "\t")
        }
        let structVariableTabsPrefix = "\(structNameTabsPrefix)\t"

        var structCode = ""
        structCode.append(contentsOf: "\n\n\(structNameTabsPrefix)struct \(structName) {")

        let keys: [String] = Array<String>(self.keys)
        let sortedKeys = keys.sorted {
            return $0 < $1
        }

        for key in sortedKeys {
            var passForwardKeys: [String] = chainedKeys
            passForwardKeys.append(key)

            if let _ = self[key] as? String {
                structCode.append(contentsOf: "\n\(structVariableTabsPrefix)static var \(key): String =")
                structCode.append(contentsOf: "\n\(structVariableTabsPrefix)\tVariantPlistReader.shared.string(for: \(passForwardKeys))")
                continue
            }

            if let _ = self[key] as? NSNumber {
                if let _ = self[key] as? Bool {
                    structCode.append(contentsOf: "\n\(structVariableTabsPrefix)static var \(key): Bool =")
                    structCode.append(contentsOf: "\n\(structVariableTabsPrefix)\tVariantPlistReader.shared.bool(for: \(passForwardKeys))")
                    continue
                }
                structCode.append(contentsOf: "\n\(structVariableTabsPrefix)static var \(key): NSNumber =")
                structCode.append(contentsOf: "\n\(structVariableTabsPrefix)\tVariantPlistReader.shared.number(for: \(passForwardKeys))")
                continue
            }
            if let _ = self[key] as? [String] {
                 structCode.append(contentsOf: "\n\(structVariableTabsPrefix)static var \(key): [String] =")
                 structCode.append(contentsOf: "\n\(structVariableTabsPrefix)\t VariantPlistReader.shared.stringArray(for: \(passForwardKeys))")
                 structCode.append(contentsOf: "\n\(structVariableTabsPrefix)")
                 continue
            }

            if let value = self[key] as? PlistDictionary {
                let capitalizedKey = key.lowercased().capitalized
                let subDictionaryCode = value.generateStructSourceCode(structName: capitalizedKey,
                                                                       depth: depth+1,
                                                                       chainedKeys: passForwardKeys)
                structCode.append(contentsOf: subDictionaryCode)
                continue
            }
        }
        structCode.append(contentsOf: "\n\(structNameTabsPrefix)}")
        return structCode
    }
}
